/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0/userguide/custom_plugins.html
 */

plugins {
    //id("java-library")
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`

    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm")

    id("maven-publish")

    signing
}

val javadocJar by tasks.registering(Jar::class) {
    archiveClassifier.set("javadoc")
    from(tasks["javadoc"])
}

val sourcesJar by tasks.registering(Jar::class) {
    archiveClassifier.set("sources")
    from(sourceSets["main"].allSource)
}


// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets(functionalTestSourceSet)

tasks.named<Task>("check") {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}

tasks.named<Test>("test") {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}

/**
 * java's project, does not support the configuration of debug and release like android, so it is distinguished by a parameter.
 * The default is false, and the task is executed when uploading to maven: . /gradlew publishI18nStringsPublicationToMavenRepository -PisPublish=true
 */
val isPublish = project.findProperty("isPublish")?.toString()?.toBoolean() ?: rootProject.extra["isPublish"] as Boolean

dependencies {
    implementation(libs.bundles.core)
    implementation(libs.gradle.get())
    implementation(libs.googleCloudTranslate.get())
    if(!isPublish) {
        implementation(project(":core"))
    }
    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.2")
}

sourceSets {
    getByName("main") {
        java {
            srcDir("src/main/kotlin")
            if(isPublish) {
                srcDir("../core/src/main/kotlin")
                srcDir("../core/src/plugin/kotlin")
            }
        }
    }
}

gradlePlugin {
    // Define the plugin
    val i18nStrings by plugins.creating {
        id = "com.appkim.i18nstrings"
        implementationClass = "com.appkim.i18nstrings.plugin.I18nStringsPlugin"
    }
}

publishing {
    publications {
        create<MavenPublication>("i18nStrings") {
            groupId = "com.appkim.i18nstrings"
            artifactId = "plugin"
            version = rootProject.extra["i18nVersion"] as String
            from(components["java"])

            artifact(javadocJar.get())
            artifact(sourcesJar.get())

            pom {
                name.set("I18nStrings")
                description.set("I18nStrings is a turn-key Gradle plugin for Android projects, providing comprehensive internationalization and multilingual support.")
                url.set("https://github.com/appsbuilder999/i18nstrings")
                licenses {
                    license {
                        name.set("The Apache Software License, Version 2.0")
                        url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                    }
                }
                developers {
                    developer {
                        id.set("appsbuilder999")
                        name.set("appsbuilder999")
                        email.set("appsbuilder999@gmail.com")
                    }
                }
                scm {
                    connection.set("scm:git:github.com/appsbuilder999/i18nstrings.git")
                    developerConnection.set("scm:git:ssh://github.com/appsbuilder999/i18nstrings.git")
                    url.set("https://github.com/appsbuilder999/i18nstrings")
                }
            }
        }
    }

    repositories {
        maven {
            url = uri("../../repo")
        }
    }
}


signing {
    sign(publishing.publications["i18nStrings"])
}

